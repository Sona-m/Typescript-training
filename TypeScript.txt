************************TypeScript************************************
-> Microsoft
-> compiled to javascript
-> open source lib
 
->prevent bugs
-> npm install -g typescript
-> tsc (typescript compiler)

Basic Types
-------------
Boolean
Number
String
Array
Enum
Any
Void

var n : Number =1;


************typeScript.ts******************

console.log("Hello World");

function hello(string : String){
    console.log("Hello " + string);
}
hello("Sonam")
//hello(1);  through an error you are passing a parameter as number

var n : Number =1

var isWinter : boolean = true
var names : String = "Sonam"
var a: String[] = ['a', 'b' , 'c']
var b : any[] = ["a" , 1 , 1.5 , true]

enum weather {summer , winter , rainy}

var day : weather = weather.rainy
console.log(day)


function hey():void{
    console.log("hey")
}


// Interface

interface Animal{
   name : String;
   age? : number  // optional
}

function printName(stark : Animal){
    console.log(stark.name)
}

printName({name : "Sonam"})
printName({ name : "Nihal" , age : 25})


// classes

class Fruit{
    name : String = "Apple";
    saying : String;
    constructor(){
        this.saying = "hey"
    }
    eat() : void{
        console.log("Hey Apple")
    }
}

var fruit = new Fruit();
fruit.eat();
console.log(fruit.name)


// Inheritance

class Person{
    name : string;
    constructor(name : string){
     this.name = name
    }
    dance(){
        console.log(this.name + " is dancing")
    }
}

var nihal = new Person("nihal");
nihal.dance();

class abc extends Person{
    dance(): void {
        super.dance();
        console.log("abc is dancing")
    }
}

var abc1 = new abc("abc");
abc1.dance();

******************************typeScript.js*************

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
console.log("Hello World");
function hello(string) {
    console.log("Hello " + string);
}
hello("Sonam");
//hello(1);  through an error you are passing a parameter as number
var n = 1;
var isWinter = true;
var names = "Sonam";
var a = ['a', 'b', 'c'];
var b = ["a", 1, 1.5, true];
var weather;
(function (weather) {
    weather[weather["summer"] = 0] = "summer";
    weather[weather["winter"] = 1] = "winter";
    weather[weather["rainy"] = 2] = "rainy";
})(weather || (weather = {}));
var day = weather.rainy;
console.log(day);
function hey() {
    console.log("hey");
}
function printName(stark) {
    console.log(stark.name);
}
printName({ name: "Sonam" });
printName({ name: "Nihal", age: 25 });
// classes
var Fruit = /** @class */ (function () {
    function Fruit() {
        this.name = "Apple";
        this.saying = "hey";
    }
    Fruit.prototype.eat = function () {
        console.log("Hey Apple");
    };
    return Fruit;
}());
var fruit = new Fruit();
fruit.eat();
console.log(fruit.name);
// Inheritance
var Person = /** @class */ (function () {
    function Person(name) {
        this.name = name;
    }
    Person.prototype.dance = function () {
        console.log(this.name + " is dancing");
    };
    return Person;
}());
var nihal = new Person("nihal");
nihal.dance();
var abc = /** @class */ (function (_super) {
    __extends(abc, _super);
    function abc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    abc.prototype.dance = function () {
        _super.prototype.dance.call(this);
        console.log("abc is dancing");
    };
    return abc;
}(Person));
var abc1 = new abc("abc");
abc1.dance();



********************TypeScript with React***********************

-> npx create-react-app react-typescript --template typescript

